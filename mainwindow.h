////////////////////////////////////////////////////////////////////////////////
// (c) 2012 Rolf Meyerhoff. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
///\file    mainwindow.h
///\ingroup dtedit
///\brief   Main window class definition.
///\author  Rolf Meyerhoff (badlantic@gmail.com)
///\version 1.0
/// This file is part of the DT editor.
////////////////////////////////////////////////////////////////////////////////
///\par License:
/// This program is free software: you can redistribute it and/or modify it
/// under the terms of the GNU General Public License as published by the Free
/// Software Foundation, either version 2 of the License, or (at your option)
/// any later version.
///\par
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even  the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
/// more details.
///\par
/// You should have received a copy of the GNU General Public License along with
/// this program; see the file COPYING. If not, see http://www.gnu.org/licenses/
/// or write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
/// Floor, Boston, MA 02110-1301, USA.
////////////////////////////////////////////////////////////////////////////////
#ifndef __MAINWINDOW_H_INCLUDED__
#define __MAINWINDOW_H_INCLUDED__

#include <QtGui>
#include "dtedit.h"
#include "mainmidiwindow.h"

////////////////////////////////////////////////////////////////////////////////
///\class MainWindow mainwindow.h
///\brief Main window class.
/// This is the main widget of the application.
////////////////////////////////////////////////////////////////////////////////
class MainWindow :
  public MainMIDIWindow
{
  Q_OBJECT // Qt magic...

public:
  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::MainWindow()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Initialization constructor of this window.
  ///\param   [in] parent: Parent window for this window.
  ///\remarks Basically initializes the entire gui.
  //////////////////////////////////////////////////////////////////////////////
  MainWindow(QWidget* parent = 0);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::~MainWindow()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Destructor of this window.
  ///\remarks Choose! Choose the form of the Destructor!
  //////////////////////////////////////////////////////////////////////////////
  ~MainWindow();

protected:
  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::closeEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the window close event.
  ///\param   [in] e: Description of the event.
  ///\remarks To allow the window to close, call e->accept().
  //////////////////////////////////////////////////////////////////////////////
  void closeEvent(QCloseEvent* e);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::showEvent()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Message handler for the window show event.
  ///\param   [in] e: Description of the event.
  //////////////////////////////////////////////////////////////////////////////
  void showEvent(QShowEvent* e);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::controlChangeReceived()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   This is called when a new control change message arrives.
  ///\param   [in] channel:       MIDI channel of this message.
  ///\param   [in] controlNumber: Controller number.
  ///\param   [in] value:         Control value.
  //////////////////////////////////////////////////////////////////////////////
  virtual void controlChangeReceived(unsigned char channel, unsigned char controlNumber, unsigned char value);

private:

  void readFile(const QString& fileName);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::createActions()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Create all required actions.
  //////////////////////////////////////////////////////////////////////////////
  void createActions();

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::createMenu()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Create the main menu.
  //////////////////////////////////////////////////////////////////////////////
  void createMenu();

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::createEditArea()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Create the main edit area.
  //////////////////////////////////////////////////////////////////////////////
  void createEditArea();

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::getValuesFromDT()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Sync UI with the values from the actual DT.
  ///\remarks This functions sends value request CCs to the DT. The UI is then
  ///         updated by the CC receive function.
  //////////////////////////////////////////////////////////////////////////////
  void getValuesFromDT();

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::sendBlockMessage()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Send ui block CCs to the DT.
  ///\param   [in] block: Block the UI?
  ///\remarks The DT just reflects everything that it receives at the input to
  ///         the output. So every clean to the DT is guarded by an unsed CC
  ///         with a boolean flag to either block or unblock the UI to avoid
  ///         MIDI feedback loops.
  //////////////////////////////////////////////////////////////////////////////
  void sendBlockMessage(bool block);

private slots:

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::exitApplication()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the Exit-Application signal.
  ///\remarks Closes the window and quits the application.
  //////////////////////////////////////////////////////////////////////////////
  void exitApplication();

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::about()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the Help->About signal.
  ///\remarks Shows an about box with informations about this application.
  //////////////////////////////////////////////////////////////////////////////
  void about();

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::setupMIDI()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the File->Setup signal.
  ///\remarks Shows the MIDI setup dialog.
  //////////////////////////////////////////////////////////////////////////////
  void setupMIDI();

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::ampAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the amp A combo box selection changed event.
  ///\param   [in] value: Index of the selected item.
  //////////////////////////////////////////////////////////////////////////////
  void ampAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::cabAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the cab A combo box selection changed event.
  ///\param   [in] value: Index of the selected item.
  //////////////////////////////////////////////////////////////////////////////
  void cabAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::gainAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the gain A dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void gainAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::bassAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the bass A dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void bassAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::middleAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the middle A dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void middleAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::trebleAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the treble A dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void trebleAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::presenceAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the presence A dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void presenceAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::volumeAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the volume A dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void volumeAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::voiceA1toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the voice A1 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void voiceA1toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::voiceA2toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the voice A2 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void voiceA2toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::voiceA3toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the voice A3 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void voiceA3toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::voiceA4toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the voice A4 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void voiceA4toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbBypassAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb A bypass checkbox change event.
  ///\param   [in] value: New state of the box.
  //////////////////////////////////////////////////////////////////////////////
  void reverbBypassAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb A combo box selection changed event.
  ///\param   [in] value: Index of the selected item.
  //////////////////////////////////////////////////////////////////////////////
  void reverbAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbDecayAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb A decay dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void reverbDecayAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbPredelayAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb A pre delay dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void reverbPredelayAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbToneAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb A tone dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void reverbToneAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbMixAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb A mix dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void reverbMixAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::classAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the class A/AB slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void classAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::xtodeAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the pentode/triode slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void xtodeAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::boostAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the boost on/off slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void boostAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::pivoltAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the PI voltage slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void pivoltAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::capAChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the cap X/Y slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void capAChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::topolA1toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the topology A1 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void topolA1toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::topolA2toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the topology A2 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void topolA2toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::topolA3toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the topology A3 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void topolA3toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::topolA4toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the topology A4 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void topolA4toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::ampBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the amp B combo box selection changed event.
  ///\param   [in] value: Index of the selected item.
  //////////////////////////////////////////////////////////////////////////////
  void ampBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::cabBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the cab B combo box selection changed event.
  ///\param   [in] value: Index of the selected item.
  //////////////////////////////////////////////////////////////////////////////
  void cabBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::gainBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the gain B dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void gainBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::bassBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the bass B dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void bassBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::middleBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the middle B dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void middleBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::trebleBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the treble B dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void trebleBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::presenceBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the presence B dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void presenceBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::volumeBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the volume B dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void volumeBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::voiceB1toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the voice B1 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void voiceB1toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::voiceB2toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the voice B2 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void voiceB2toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::voiceB3toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the voice B3 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void voiceB3toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::voiceB4toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the voice B4 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void voiceB4toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbBypassBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb B bypass checkbox change event.
  ///\param   [in] value: New state of the box.
  //////////////////////////////////////////////////////////////////////////////
  void reverbBypassBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb B combo box selection changed event.
  ///\param   [in] value: Index of the selected item.
  //////////////////////////////////////////////////////////////////////////////
  void reverbBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbDecayBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb B decay dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void reverbDecayBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbPredelayBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb B predelay dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void reverbPredelayBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbToneBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb B tone dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void reverbToneBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::reverbMixBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the reverb B mix dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void reverbMixBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::classBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the class A/AB slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void classBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::xtodeBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the pentode/triode slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void xtodeBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::boostBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the boost on/off slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void boostBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::pivoltBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the PI voltage slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void pivoltBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::capBChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the cap X/Y slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void capBChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::topolB1toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the topology B1 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void topolB1toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::topolB2toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the topology B2 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void topolB2toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::topolB3toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the topology B3 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void topolB3toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::topolB4toggled()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the topology B4 radio button toggle event.
  ///\param   [in] checked: New state of the button.
  //////////////////////////////////////////////////////////////////////////////
  void topolB4toggled(bool checked);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::micChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the mic combo box selection changed event.
  ///\param   [in] value: Index of the selected item.
  //////////////////////////////////////////////////////////////////////////////
  void micChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::lowVolChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the low volume checkbox change event.
  ///\param   [in] value: New state of the box.
  //////////////////////////////////////////////////////////////////////////////
  void lowVolChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::channelChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for channel slider changed event.
  ///\param   [in] value: New value of the slider.
  ///\remarks The slider value can only be 0 and 1 so it's working as a switch.
  //////////////////////////////////////////////////////////////////////////////
  void channelChanged(int value);

  //////////////////////////////////////////////////////////////////////////////
  // MainWindow::masterChanged()
  //////////////////////////////////////////////////////////////////////////////
  ///\brief   Handler for the master dial changed event.
  ///\param   [in] value: New value of the dial.
  //////////////////////////////////////////////////////////////////////////////
  void masterChanged(int value);

private:

  //////////////////////////////////////////////////////////////////////////////
  // Member:
  QComboBox*    ampA;            ///> Channel A amp model selector.
  QComboBox*    cabA;            ///> Channel A cabinet selector.
  QDial*        gainA;           ///> Channel A gain dial.
  QDial*        bassA;           ///> Channel A bass dial.
  QDial*        middleA;         ///> Channel A middle dial.
  QDial*        trebleA;         ///> Channel A treble dial.
  QDial*        presenceA;       ///> Channel A presence dial.
  QDial*        volumeA;         ///> Channel A volume dial.
  QCheckBox*    reverbBypassA;   ///> Reverb A enabled switch.
  QComboBox*    reverbA;         ///> Reverb A type selector.
  QDial*        reverbDecayA;    ///> Reverb A decay dial.
  QDial*        reverbPredelayA; ///> Reverb A pre delay dial.
  QDial*        reverbToneA;     ///> Reverb A tone dial.
  QDial*        reverbMixA;      ///> Reverb A mix dial.
  QRadioButton* voiceA1;         ///> Channel A voice I select.
  QRadioButton* voiceA2;         ///> Channel A voice II select.
  QRadioButton* voiceA3;         ///> Channel A voice III select.
  QRadioButton* voiceA4;         ///> Channel A voice IV select.
  QSlider*      classA;          ///> Channel A, Class A/B switch.
  QSlider*      xtodeA;          ///> Channel A Pentode / triode switch.
  QRadioButton* topolA1;         ///> Channel A topology I select.
  QRadioButton* topolA2;         ///> Channel A topology II select.
  QRadioButton* topolA3;         ///> Channel A topology III select.
  QRadioButton* topolA4;         ///> Channel A topology IV select.
  QSlider*      boostA;          ///> Channel A tube boost on/off.
  QSlider*      pivoltA;         ///> Channel A phase inverter switch.
  QSlider*      capA;            ///> Channel A cap X, cap Y switch.
  QComboBox*    ampB;            ///> Channel B amp model selector.
  QComboBox*    cabB;            ///> Channel B cabinet selector.
  QDial*        gainB;           ///> Channel B gain dial.
  QDial*        bassB;           ///> Channel B bass dial.
  QDial*        middleB;         ///> Channel B middle dial.
  QDial*        trebleB;         ///> Channel B treble dial.
  QDial*        presenceB;       ///> Channel B presence dial.
  QDial*        volumeB;         ///> Channel B volume dial.
  QCheckBox*    reverbBypassB;   ///> Reverb B enabled switch.
  QComboBox*    reverbB;         ///> Reverb B type selector.
  QDial*        reverbDecayB;    ///> Reverb B decay dial.
  QDial*        reverbPredelayB; ///> Reverb B pre delay dial.
  QDial*        reverbToneB;     ///> Reverb B tone dial.
  QDial*        reverbMixB;      ///> Reverb B mix dial.
  QRadioButton* voiceB1;         ///> Channel B voice I select.
  QRadioButton* voiceB2;         ///> Channel B voice II select.
  QRadioButton* voiceB3;         ///> Channel B voice III select.
  QRadioButton* voiceB4;         ///> Channel B voice IV select.
  QSlider*      classB;          ///> Channel B, Class A/B switch.
  QSlider*      xtodeB;          ///> Channel B Pentode / triode switch.
  QRadioButton* topolB1;         ///> Channel B topology I select.
  QRadioButton* topolB2;         ///> Channel B topology II select.
  QRadioButton* topolB3;         ///> Channel B topology III select.
  QRadioButton* topolB4;         ///> Channel B topology IV select.
  QSlider*      boostB;          ///> Channel B tube boost on/off.
  QSlider*      pivoltB;         ///> Channel B phase inverter switch.
  QSlider*      capB;            ///> Channel B cap X, cap Y switch.
  QComboBox*    mic;             ///> Master XLR mic simulation.
  QCheckBox*    lowVol;          ///> Low volume switch.
  QSlider*      channel;         ///> Channel A/B switch.
  QDial*        master;          ///> Master volume.
  QAction*      openAction;      ///> File->Open.
  QAction*      saveAction;      ///> File->Save.
  QAction*      saveAsAction;    ///> File->Save as.
  QAction*      quitAction;      ///> File->Quit action.
  QAction*      setupAction;     ///> Options->Setup action.
  QAction*      defaultsAction;  ///> Options->Load defaults on amp change.
  QAction*      aboutAction;     ///> Help->About action.
  QAction*      aboutQtAction;   ///> Help->About Qt action.
  QMenu*        fileMenu;        ///> File main menu item.
  QMenu*        optionsMenu;     ///> Options main menu item.
  QMenu*        helpMenu;        ///> Help main menu item.
  bool          blocked;         ///> UI udate blocking flag.
};

#endif // #ifndef __MAINWINDOW_H_INCLUDED__
///////////////////////////////// End of File //////////////////////////////////
